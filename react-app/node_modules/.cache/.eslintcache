[{"/home/black/Projects/python/django_react/react-app/src/index.js":"1","/home/black/Projects/python/django_react/react-app/src/App.js":"2","/home/black/Projects/python/django_react/react-app/src/reportWebVitals.js":"3","/home/black/Projects/python/django_react/react-app/src/CheckboxForm.js":"4"},{"size":535,"mtime":1681410433764,"results":"5","hashOfConfig":"6"},{"size":186,"mtime":1681437375524,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1681410433764,"results":"8","hashOfConfig":"6"},{"size":6667,"mtime":1681833524651,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c20orz",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/home/black/Projects/python/django_react/react-app/src/index.js",[],[],"/home/black/Projects/python/django_react/react-app/src/App.js",[],[],"/home/black/Projects/python/django_react/react-app/src/reportWebVitals.js",[],[],"/home/black/Projects/python/django_react/react-app/src/CheckboxForm.js",["23","24","25","26","27","28","29"],[],"// import React, { useState } from 'react';\n// import './CheckboxForm.css';\n\n// function CheckboxForm(){\n//   const options = ['Remove null Attributes', 'Cloud of Words', 'Language Distribution', 'Data Distribution', 'Stance Distribution', 'Localisation Distribution'];\n\n//   return(\n//     <div className=\"form-container\">\n//       <form>\n//         <label className=\"form-label\"htmlFor=\"name\">Title:</label>\n//         <input className=\"form-input\" type=\"text\" id=\"name\" name=\"name\"/>\n\n\n//         {options.map((option, index) => (\n//           <label key={index} className=\"checkbox-label\" id={`checkbox-label-${index+1}`}>\n//             <input type=\"checkbox\" name={`option${index+1}`}/> {option}\n//           </label>\n//         ))}\n\n\n//         <div className=\"submit-button-wrapper\">\n//           <button className=\"submit-button\" type=\"submit\">Submit</button>\n//         </div>\n\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default CheckboxForm;\n\n\n//____________________________________________________________________________\n\n// const CheckboxForm = () => {\n//   const options = ['Remove null Attributes', 'Cloud of Words', 'Language Distribution', 'Data Distribution', 'Stance Distribution', 'Localisation Distribution'];\n//   const [images, setImages] = useState([]);\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     const formData = new FormData(event.target);\n//     const selectedOptions = Array.from(formData.keys()).filter((key) => formData.get(key) === 'on');\n\n//     const response = await fetch('localhost:8000/image_processing/', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await response.json();\n//     const images = data.images;\n\n//     setImages(images);\n//   };\n\n//   return (\n//     <div className=\"form-container\">\n\n//       <form onSubmit={handleSubmit}>\n//         <label className=\"form-label\"htmlFor=\"name\">Title:</label>\n//         <input className=\"form-input\" type=\"text\" id=\"name\" name=\"name\"/>\n\n//         {options.map((option, index) => (\n//           <label key={index} className=\"checkbox-label\" id={`checkbox-label-${index+1}`}>\n//             <input type=\"checkbox\" name={`option${index+1}`}/> {option}\n//           </label>\n//         ))}\n\n//         <div className=\"submit-button-wrapper\">\n//           <button className=\"submit-button\" type=\"submit\">Submit</button>\n//         </div>\n//       </form>\n\n//       <div className=\"image-container\">\n//         {images.map((image, index) => {\n//           <img key={index} src={`/static/images/${image}`} alt={`Image ${index}`} />\n//         })}\n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default CheckboxForm;\n\n\n\n//____________________________________________________________________________\n\n// import React, { Component } from 'react';\n\n// class App extends Component {\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       images: [],\n//     };\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n\n\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     const formData = new FormData(event.target);\n//     fetch('/process_image/', {\n//       method: 'POST',\n//       headers: {\n//         'X-CSRFToken': getCookie('csrftoken') // Get the CSRF token from the cookie\n//       },\n//       body: formData\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       console.log(data);\n//       this.setState({ images: data });\n//     })\n//     .catch(error => console.error(error));\n//   }\n\n//   render() {\n//     const options = ['Remove null Attributes', 'Cloud of Words', 'Language Distribution', 'Data Distribution', 'Stance Distribution', 'Localisation Distribution'];\n//     return (\n//       <div>\n//         <h1>React App</h1>\n//         <form onSubmit={this.handleSubmit}>\n//           <label>\n//             Input:\n//             <input type=\"text\" name=\"input\" />\n//           </label>\n//           <br />\n//           {options.map((option, index) => (\n//             <label key={index} className=\"checkbox-label\" id={`checkbox-label-${index+1}`}>\n//               <input type=\"checkbox\" name={`option${index+1}`}/> {option}\n//             </label>\n//           ))}\n//           <button type=\"submit\">Submit</button>\n//         </form>\n//         {this.state.images.map(image => (\n//           <img key={image.id} src={image.url} alt={image.name} />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n\n// function getCookie(name) {\n//   let cookieValue = null;\n//   if (document.cookie && document.cookie !== ''){\n//     let cookies = document.cookie.split(';');\n//     for (let i=0 ; i<cookies.length ; i++){\n//       let cookie = cookies[i].trim();\n//       if (cookie.substring(0, name.length+1) === (name + '=')) {\n//         cookieValue = decodeURIComponent(cookie.substring(name.length+1));\n//         break\n//       }\n//     }\n//   }\n//   return cookieValue;\n// }\n\n\n// export default App\n\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport axios from 'axios';\n\n\nconst CheckboxForm = () => {\n  const options = ['Remove null Attributes', 'Cloud of Words', 'Language Distribution', 'Data Distribution', 'Stance Distribution', 'Localisation Distribution'];\n  const [images, setImages] = useState([]);\n\n  const [title, setTitle] = useState(\"\");\n  const [remove_null_attr, setRemove_null_attr] = useState(false);\n\n  const handleSubmit = async () => {\n    let formField = new FormData();\n    formField.append('name', title)\n    formField.append('option1', remove_null_attr)\n\n    await axios({\n      method: 'post',\n      url: 'http://localhost:8000/image_processing/',\n      data: formField\n    }).then((response) => {\n      console.log(response.data)\n      history.push('/')\n    })\n  }\n\n  return (\n    <div className=\"form-container\">\n\n      <form onSubmit={handleSubmit}>\n        <label className=\"form-label\"htmlFor=\"name\">Title:</label>\n        <input className=\"form-input\" type=\"text\" id=\"name\" name=\"name\"/>\n\n        {options.map((option, index) => (\n          <label key={index} className=\"checkbox-label\" id={`checkbox-label-${index+1}`}>\n            <input type=\"checkbox\" name={`option${index+1}`}/> {option}\n          </label>\n        ))}\n\n        <div className=\"submit-button-wrapper\">\n          <button className=\"submit-button\" onClick=\"handleSubmit\">Submit</button>\n        </div>\n      </form>\n\n      <div className=\"image-container\">\n        {images.map((image, index) => {\n          <img key={index} src={`/static/images/${image}`} alt={`Image ${index}`} />\n        })}\n      </div>\n\n    </div>\n  );\n}\n\nexport default CheckboxForm;\n\n",{"ruleId":"30","severity":1,"message":"31","line":168,"column":10,"nodeType":"32","messageId":"33","endLine":168,"endColumn":20},{"ruleId":"30","severity":1,"message":"34","line":174,"column":18,"nodeType":"32","messageId":"33","endLine":174,"endColumn":27},{"ruleId":"30","severity":1,"message":"35","line":176,"column":17,"nodeType":"32","messageId":"33","endLine":176,"endColumn":25},{"ruleId":"30","severity":1,"message":"36","line":177,"column":28,"nodeType":"32","messageId":"33","endLine":177,"endColumn":47},{"ruleId":"37","severity":2,"message":"38","line":190,"column":7,"nodeType":"32","messageId":"39","endLine":190,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":213,"column":36,"nodeType":"42","messageId":"43","endLine":213,"endColumn":38},{"ruleId":"44","severity":1,"message":"45","line":214,"column":11,"nodeType":"46","endLine":214,"endColumn":85},"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'setImages' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'setRemove_null_attr' is assigned a value but never used.","no-restricted-globals","Unexpected use of 'history'.","defaultMessage","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]